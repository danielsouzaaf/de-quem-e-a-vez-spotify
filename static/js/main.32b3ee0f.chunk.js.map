{"version":3,"sources":["avatars/dsa.jpg","avatars/mvb.jpg","avatars/aks.jpg","avatars/lfm.jpg","avatars/meg.jpg","avatars/mlm.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","payers","dsa","name","avatar","DsaAvatar","mvb","MvbAvatar","aks","AksAvatar","lfm","LfmAvatar","meg","MegAvatar","mlm","MlmAvatar","months","monthsName","Item","_ref","currentMonth","month","payer","react_default","a","createElement","className","currentDate","Date","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","getMonth","_this2","src","alt","map","payerId","App_Item","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8UCWlCC,EAAS,CACbC,IAAO,CAAEC,KAAM,SAAUC,OAAQC,KACjCC,IAAO,CAAEH,KAAM,SAAUC,OAAQG,KACjCC,IAAO,CAAEL,KAAM,QAASC,OAAQK,KAChCC,IAAO,CAAEP,KAAM,UAAQC,OAAQO,KAC/BC,IAAO,CAAET,KAAM,OAAQC,OAAQS,KAC/BC,IAAO,CAAEX,KAAM,OAAQC,OAAQW,MAG3BC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEvFC,EAAa,CAAC,UAAW,YAAa,WAAS,QAAS,OAAQ,QAAS,QAAS,SAAU,WAC9F,UAAW,WAAY,YAErBC,EAAO,SAAAC,GAA2B,IAAzBC,EAAyBD,EAAzBC,aAAcC,EAAWF,EAAXE,MACrBC,EAAQrB,EAAOe,EAAOK,IAE5B,OACIE,EAAAC,EAAAC,cAAA,OAAKC,UAAWL,IAAUD,EAAe,mBAAqB,YACzDE,EAAMnB,KADX,MACoBc,EAAWI,KAK/BM,EAAc,IAAIC,KAmCTC,cA/Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTjB,MAAOM,EAAYY,WACnBjB,MAAOrB,EAAOe,EAAOW,EAAYY,cAJpBR,wEAQV,IAAAS,EAAAN,KACP,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACdH,EAAAC,EAAAC,cAAA,8CACFF,EAAAC,EAAAC,cAAA,OAAKgB,IAAKP,KAAKI,MAAMhB,MAAMlB,OAAQsB,UAAU,WAAWgB,IAAI,SAC5DnB,EAAAC,EAAAC,cAAA,oCAEKT,EAAO2B,IAAI,SAACC,EAASvB,GAAV,OACRE,EAAAC,EAAAC,cAACoB,EAAD,CACIzB,aAAcoB,EAAKF,MAAMjB,MACzBA,MAAOA,EACPyB,IAAKzB,gBAtBT0B,aCzBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.32b3ee0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dsa.be575f5d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mvb.da181273.jpg\";","module.exports = __webpack_public_path__ + \"static/media/aks.30334d85.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lfm.187434aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/meg.bf656751.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mlm.7c99f23e.jpg\";","import React, { Component } from 'react';\nimport './App.css';\n\nimport DsaAvatar from './avatars/dsa.jpg';\nimport MvbAvatar from './avatars/mvb.jpg';\nimport AksAvatar from './avatars/aks.jpg';\nimport LfmAvatar from './avatars/lfm.jpg';\nimport MegAvatar from './avatars/meg.jpg';\nimport MlmAvatar from './avatars/mlm.jpg';\n\n\nconst payers = {\n  'dsa': { name: 'Daniel', avatar: DsaAvatar},\n  'mvb': { name: 'Barcos', avatar: MvbAvatar},\n  'aks': { name: 'Karol', avatar: AksAvatar},\n  'lfm': { name: 'Luís', avatar: LfmAvatar},\n  'meg': { name: 'Duda', avatar: MegAvatar},\n  'mlm': { name: 'Mari', avatar: MlmAvatar}\n};\n\nconst months = ['dsa', 'mvb', 'aks', 'lfm', 'meg', 'mlm', 'dsa', 'mvb', 'aks', 'lfm', 'meg', 'mlm'];\n\nconst monthsName = ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho', 'julho', 'agosto', 'setembro',\n    'outubro', 'novembro', 'dezembro'];\n\nconst Item = ({currentMonth, month}) => {\n  const payer = payers[months[month]];\n\n  return (\n      <div className={month === currentMonth ? 'App-item-current' : 'App-item'}>\n          {payer.name} - {monthsName[month]}\n      </div>\n  );\n};\n\nconst currentDate = new Date();\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n        month: currentDate.getMonth(),\n        payer: payers[months[currentDate.getMonth()]]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n            <h1>Quem paga o Spotify esse mês?</h1>\n          <img src={this.state.payer.avatar} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Lista de pagantes do ano\n              {months.map((payerId, month) =>\n                  <Item\n                      currentMonth={this.state.month}\n                      month={month}\n                      key={month}\n                  />\n              )}\n          </p>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}